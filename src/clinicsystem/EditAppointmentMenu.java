/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clinicsystem;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author c7-ong
 */
public class EditAppointmentMenu extends javax.swing.JFrame {

    /**
     * Creates new form AddPatientMenu
     */
    final static String DATE_FORMAT = "dd/MM/yyyy";
    String role;
    String dateFormat = "dd/mm/yyyy";
    public EditAppointmentMenu() {
        initComponents();
    }
    
    public void setRole(String setRole)
    {
        this.role = setRole;
        System.out.println(role);
    }
    
    public String getRole()
    {
        return role;
    }
    
    public javax.swing.JComboBox<String> getPatientComboBox()
    {
        return patientCombo;
    }
    
    public javax.swing.JComboBox<String> getDoctorComboBox()
    {
        return doctorCombo;
    }
    
    public javax.swing.JComboBox<String> getAppointmentComboBox()
    {
        return appointmentCombo;
    }
    
     public void setAppointmentEditData(String ID, String details, String date, String status, String patientID, String doctorID)
    {
       appointmentID.setText(ID);
       appointmentDetails.setText(details);
       appointmentDate.setText(date);
       statusCombo.setSelectedItem(status);
       patientCombo.setSelectedItem(patientID);
       doctorCombo.setSelectedItem(doctorID);
    }
     
     public boolean isDateValid(String date)
    {
        try
        {
            DateFormat format = new SimpleDateFormat(dateFormat);
            format.setLenient(false);
            format.parse(date);
            return true;
        }
        catch (ParseException e)
        {
            System.out.println(e.getMessage());
            return false;
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        appointmentDate = new javax.swing.JTextField();
        patientCombo = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        updateDetails = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        doctorCombo = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        appointmentDetails = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        statusCombo = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        appointmentCombo = new javax.swing.JComboBox<>();
        selectAppointmentBtn = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        appointmentID = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Edit appointment details");

        jLabel2.setText("Appointment details:");

        jLabel3.setText("Appointment date (dd/mm/yyyy):");
        jLabel3.setToolTipText("");

        jLabel4.setText("Patient ID for appointment:");

        appointmentDate.setEnabled(false);
        appointmentDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appointmentDateActionPerformed(evt);
            }
        });

        patientCombo.setEnabled(false);

        jLabel5.setText("Doctor ID in charge:");

        updateDetails.setEnabled(false);
        updateDetails.setLabel("Update details");
        updateDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDetailsActionPerformed(evt);
            }
        });

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        doctorCombo.setEnabled(false);

        appointmentDetails.setColumns(20);
        appointmentDetails.setLineWrap(true);
        appointmentDetails.setRows(5);
        appointmentDetails.setEnabled(false);
        jScrollPane1.setViewportView(appointmentDetails);

        jLabel6.setText("Appointment status:");

        statusCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Scheduled", "Postponed", "Cancelled" }));
        statusCombo.setEnabled(false);

        jLabel7.setText("Appointment ID:");

        selectAppointmentBtn.setText("Select appointment");
        selectAppointmentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAppointmentBtnActionPerformed(evt);
            }
        });

        jLabel8.setText("Appointment ID:");

        appointmentID.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(updateDetails)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel8)
                                            .addComponent(jLabel2))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(appointmentID, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel7)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(appointmentCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(12, 12, 12)
                                    .addComponent(selectAppointmentBtn)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(statusCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(doctorCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(appointmentDate, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 86, Short.MAX_VALUE)
                .addComponent(backBtn)
                .addGap(55, 55, 55))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(appointmentCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectAppointmentBtn))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(appointmentID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(appointmentDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(statusCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(patientCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(doctorCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateDetails)
                    .addComponent(backBtn))
                .addGap(33, 33, 33))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void updateDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDetailsActionPerformed
        // TODO add your handling code here:
        boolean empty = true;
        boolean datebool = true;
        boolean datevalid = true;
        Date parsedCurrDate = new Date();
        try {
            Date inputDate = new SimpleDateFormat(DATE_FORMAT).parse(appointmentDate.getText());
            if (inputDate.before(parsedCurrDate))
            {
                JOptionPane.showMessageDialog(null, "Invalid date entered!");
                datebool = false;
            }
        } catch (ParseException ex) {
            Logger.getLogger(AddAppointmentMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (appointmentDetails.getText().isEmpty() || 
                appointmentDate.getText().isEmpty() || 
                statusCombo.getItemAt(statusCombo.getSelectedIndex()).isEmpty() || 
                patientCombo.getItemAt(patientCombo.getSelectedIndex()).isEmpty() || 
                doctorCombo.getItemAt(doctorCombo.getSelectedIndex()).isEmpty())
        {
            JOptionPane.showMessageDialog(null, "One or more empty fields detected! Please fill in the empty fields!");
            empty = false;
        }
        else if (isDateValid(appointmentDate.getText()) == false)
        {
            JOptionPane.showMessageDialog(null, "Please re-enter date again!");
            datevalid = false;
        }
        if (datebool == true && datevalid == true && empty == true)
        {
        String details = appointmentDetails.getText();
        String date = appointmentDate.getText();
        String status = statusCombo.getItemAt(statusCombo.getSelectedIndex());
        String doctorID = doctorCombo.getItemAt(doctorCombo.getSelectedIndex());
        String id = appointmentID.getText();
        databaseConn.updateAppointmentDetails(details, date, status, doctorID, id);
        }
        
       
    }//GEN-LAST:event_updateDetailsActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        ManageAppointmentsMenu appointments = new ManageAppointmentsMenu();
        appointments.setVisible(true);
        appointments.setRole(this.getRole());
        dispose();
    }//GEN-LAST:event_backBtnActionPerformed

    private void appointmentDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appointmentDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_appointmentDateActionPerformed

    private void selectAppointmentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAppointmentBtnActionPerformed
        // TODO add your handling code here:
        String id = appointmentCombo.getSelectedItem().toString();
         if (id.isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Select a patient first!");
        }
         else
         {
             databaseConn.findAppointmentInfoForEdit(id, appointmentID, appointmentDetails, appointmentDate, statusCombo, patientCombo, doctorCombo);
             appointmentDetails.setEnabled(true);
             appointmentDate.setEnabled(true);
             statusCombo.setEnabled(true);
             doctorCombo.setEnabled(true);
             patientCombo.setEnabled(true);
             updateDetails.setEnabled(true);
         }
    }//GEN-LAST:event_selectAppointmentBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditAppointmentMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditAppointmentMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditAppointmentMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditAppointmentMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditAppointmentMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> appointmentCombo;
    private javax.swing.JTextField appointmentDate;
    private javax.swing.JTextArea appointmentDetails;
    private javax.swing.JTextField appointmentID;
    private javax.swing.JButton backBtn;
    private javax.swing.JComboBox<String> doctorCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> patientCombo;
    private javax.swing.JButton selectAppointmentBtn;
    private javax.swing.JComboBox<String> statusCombo;
    private javax.swing.JButton updateDetails;
    // End of variables declaration//GEN-END:variables
}
